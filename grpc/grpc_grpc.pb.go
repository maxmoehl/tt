// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TtClient is the client API for Tt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TtClient interface {
	StartTimer(ctx context.Context, in *StartParameters, opts ...grpc.CallOption) (*Timer, error)
	StopTimer(ctx context.Context, in *StopParameters, opts ...grpc.CallOption) (*Timer, error)
	ResumeTimer(ctx context.Context, in *ResumeParameters, opts ...grpc.CallOption) (*Timer, error)
}

type ttClient struct {
	cc grpc.ClientConnInterface
}

func NewTtClient(cc grpc.ClientConnInterface) TtClient {
	return &ttClient{cc}
}

func (c *ttClient) StartTimer(ctx context.Context, in *StartParameters, opts ...grpc.CallOption) (*Timer, error) {
	out := new(Timer)
	err := c.cc.Invoke(ctx, "/tt.Tt/StartTimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ttClient) StopTimer(ctx context.Context, in *StopParameters, opts ...grpc.CallOption) (*Timer, error) {
	out := new(Timer)
	err := c.cc.Invoke(ctx, "/tt.Tt/StopTimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ttClient) ResumeTimer(ctx context.Context, in *ResumeParameters, opts ...grpc.CallOption) (*Timer, error) {
	out := new(Timer)
	err := c.cc.Invoke(ctx, "/tt.Tt/ResumeTimer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TtServer is the server API for Tt service.
// All implementations must embed UnimplementedTtServer
// for forward compatibility
type TtServer interface {
	StartTimer(context.Context, *StartParameters) (*Timer, error)
	StopTimer(context.Context, *StopParameters) (*Timer, error)
	ResumeTimer(context.Context, *ResumeParameters) (*Timer, error)
	mustEmbedUnimplementedTtServer()
}

// UnimplementedTtServer must be embedded to have forward compatible implementations.
type UnimplementedTtServer struct {
}

func (UnimplementedTtServer) StartTimer(context.Context, *StartParameters) (*Timer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTimer not implemented")
}
func (UnimplementedTtServer) StopTimer(context.Context, *StopParameters) (*Timer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTimer not implemented")
}
func (UnimplementedTtServer) ResumeTimer(context.Context, *ResumeParameters) (*Timer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeTimer not implemented")
}
func (UnimplementedTtServer) mustEmbedUnimplementedTtServer() {}

// UnsafeTtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TtServer will
// result in compilation errors.
type UnsafeTtServer interface {
	mustEmbedUnimplementedTtServer()
}

func RegisterTtServer(s grpc.ServiceRegistrar, srv TtServer) {
	s.RegisterService(&Tt_ServiceDesc, srv)
}

func _Tt_StartTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TtServer).StartTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tt.Tt/StartTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TtServer).StartTimer(ctx, req.(*StartParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tt_StopTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TtServer).StopTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tt.Tt/StopTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TtServer).StopTimer(ctx, req.(*StopParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tt_ResumeTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TtServer).ResumeTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tt.Tt/ResumeTimer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TtServer).ResumeTimer(ctx, req.(*ResumeParameters))
	}
	return interceptor(ctx, in, info, handler)
}

// Tt_ServiceDesc is the grpc.ServiceDesc for Tt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tt.Tt",
	HandlerType: (*TtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartTimer",
			Handler:    _Tt_StartTimer_Handler,
		},
		{
			MethodName: "StopTimer",
			Handler:    _Tt_StopTimer_Handler,
		},
		{
			MethodName: "ResumeTimer",
			Handler:    _Tt_ResumeTimer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
